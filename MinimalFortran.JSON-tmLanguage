{ "name": "MinimalFortran",
  "scopeName": "source.fortran",
    "fileTypes": [
        "f",
        "F",
        "f77",
        "F77",
        "for",
        "FOR",
        "fpp",
        "FPP",
        "f90",
        "F90",
        "f95",
        "F95",
        "f03",
        "F03",
        "f08",
        "F08"
    ],
  "patterns": [


  {
      "comment": "built-in constants",
      "match": "(?i:(r8|r4|\\.TRUE\\.|\\.FALSE\\.))",
      "name": "constant.language.fortran"
  },
  {
      "comment": "numbers",
      "match": "\\b[\\+\\-]?[0-9]+\\.?[0-9a-zA-Z_]*\\b",
      "name": "constant.numeric.fortran"
  },




  {
      "begin": "(?x:\\s*([a-zA-Z\\(\\)]*)(?<!end)\\s*(?i:(function|subroutine|module|type))\\b\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*(?:(\\()([^)]*)?  (\\))?)?)",
      "beginCaptures": {
          "1": {
              "name": "storage.type.fortran"
          },
          "2": {
              "name": "storage.type.function.fortran"
          },
          "3": {
              "name": "entity.name.function.fortran"
          },
          "4": {
              "name": "punctuation.definition.parameters.fortran"
          },
          "5": {
              "name": "variable.parameter.fortran"
          },
          "6": {
              "name": "punctuation.definition.parameters.fortran"
          }
      },
      "comment": "First line of function/subroutine definition",
      "end": "(?x:((?i:end))($|\\s*(?i:function|subroutine|module|type)(\\s+[A-Za-z_][A-Za-z0-9_]*)?))",
      "endCaptures": {
          "1": {
              "name": "keyword.other.fortran"
          },
          "2": {
              "name": "storage.type.fortran"
          }
      },
      "name": "meta.function.fortran",
      "patterns": [
          {
              "include": "$self"
          }
      ]
  },

  {
      "begin": "\\b(?i:(integer|real|double\\s+precision|complex|logical|character))\\b(?=.*::)",
      "beginCaptures": {
          "1": {
              "name": "storage.type.fortran"
          }
      },
      "comment": "Line of type specification",
      "end": "(?=!)|$",
      "name": "meta.specification.fortran",
      "patterns": [
          {
              "include": "$self"
          }
      ]
  },
  {
      "comment": "statements controling the flow of the program",
      "match": "\\b(?i:(go\\s*to|assign|to|if|then|else|elseif|elif|select\\s*case|case|end\\s*select|end\\s*if|continue|stop|pause|do|end\\s*do|while|cycle))\\b",
      "name": "keyword.control.fortran"
  },
  {
      "comment": "programming units",
      "match": "\\b(?i:(program|end\\s+program|entry|block\\s+data|call|return|contains|include))\\b",
      "name": "keyword.control.programming-units.fortran"
  },
  {
      "comment": "operators",
      "match": "((?<!\\=)\\=(?!\\=)|\\-|\\+|\\/\\/|\\/|(?!^)\\*|::)",
      "name": "keyword.operator.fortran"
  },
  {
      "comment": "logical operators",
      "match": "(?i:(\\.and\\.|\\.or\\.|\\.eq\\.|\\.lt\\.|\\.le\\.|\\.gt\\.|\\.ge\\.|\\.ne\\.|\\.not\\.|\\.eqv\\.|\\.neqv\\.))",
      "name": "keyword.operator.logical.fortran"
  },
  {
      "IGNOREcomment": "brackets",
      "IGNOREmatch": "([\\()])",
      "IGNOREname": "keyword.operator.parenthesis.fortran"
  },
  {
      "comment": "data specification",
      "match": "\\b(?i:(integer|real|double\\s+precision|complex|logical|character|block\\sdata|operator|assignment|type))\\b",
      "name": "storage.type.fortran"
  },
  {
      "comment": "data type attributes",
      "match": "\\b(?i:(dimension|common|equivalence|parameter|external|intrinsic|save|data|implicit\\s*none|implicit|intent|in|out|inout))\\b",
      "name": "storage.modifier.fortran"
  },
  {
      "applyEndPatternLast": 1,
      "begin": "'",
      "beginCaptures": {
          "0": {
              "name": "punctuation.definition.string.begin.fortran"
          }
      },
      "comment": "String",
      "end": "'",
      "endCaptures": {
          "0": {
              "name": "punctuation.definition.string.end.fortran"
          }
      },
      "name": "string.quoted.single.fortran",
      "patterns": [
          {
              "match": "''",
              "name": "constant.character.escape.apostrophe.fortran"
          }
      ]
  },
  {
      "applyEndPatternLast": 1,
      "begin": "\"",
      "beginCaptures": {
          "0": {
              "name": "punctuation.definition.string.begin.fortran"
          }
      },
      "comment": "String",
      "end": "\"",
      "endCaptures": {
          "0": {
              "name": "punctuation.definition.string.end.fortran"
          }
      },
      "name": "string.quoted.double.fortran",
      "patterns": [
          {
              "match": "\"\"",
              "name": "constant.character.escape.quote.fortran"
          }
      ]
  },
  {
      "begin": "^[Cc](?=\\b|[Cc])",
      "beginCaptures": {
          "0": {
              "name": "punctuation.definition.comment.fortran"
          }
      },
      "end": "$\\n?",
      "name": "comment.line.c.fortran",
      "patterns": [
          {
              "match": "\\\\\\s*\\n"
          }
      ]
  },
  {
      "begin": "^\\*",
      "beginCaptures": {
          "0": {
              "name": "punctuation.definition.comment.fortran"
          }
      },
      "end": "$\\n?",
      "name": "comment.line.asterisk.fortran",
      "patterns": [
          {
              "match": "\\\\\\s*\\n"
          }
      ]
  },
  {
      "begin": "^\\s*#\\s*(error|warning)\\b",
      "captures": {
          "1": {
              "name": "keyword.control.import.error.fortran"
          }
      },
      "end": "$\\n?",
      "name": "meta.preprocessor.diagnostic.fortran",
      "patterns": [
          {
              "match": "(?>\\\\\\s*\\n)",
              "name": "punctuation.separator.continuation.fortran"
          }
      ]
  },
  {
      "begin": "^\\s*#\\s*(include|import)\\b\\s+",
      "captures": {
          "1": {
              "name": "keyword.control.import.include.fortran"
          }
      },
      "end": "(?=(?://|/\\*))|$\\n?",
      "name": "meta.preprocessor.fortran.include",
      "patterns": [
          {
              "match": "(?>\\\\\\s*\\n)",
              "name": "punctuation.separator.continuation.fortran"
          },
          {
              "begin": "\"",
              "beginCaptures": {
                  "0": {
                      "name": "punctuation.definition.string.begin.fortran"
                  }
              },
              "end": "\"",
              "endCaptures": {
                  "0": {
                      "name": "punctuation.definition.string.end.fortran"
                  }
              },
              "name": "string.quoted.double.include.fortran"
          },
          {
              "begin": "<",
              "beginCaptures": {
                  "0": {
                      "name": "punctuation.definition.string.begin.fortran"
                  }
              },
              "end": ">",
              "endCaptures": {
                  "0": {
                      "name": "punctuation.definition.string.end.fortran"
                  }
              },
              "name": "string.quoted.other.lt-gt.include.fortran"
          }
      ]
  },




  {
      "begin": "^[Cc](?=\\b|[Cc])",
      "beginCaptures": {
          "0": {
              "name": "punctuation.definition.comment.fortran"
          }
      },
      "end": "$\\n?",
      "name": "comment.line.c.fortran",
      "patterns": [
          {
              "match": "\\\\\\s*\\n"
          }
      ]
  },
  {
      "begin": "^\\*",
      "beginCaptures": {
          "0": {
              "name": "punctuation.definition.comment.fortran"
          }
      },
      "end": "$\\n?",
      "name": "comment.line.asterisk.fortran",
      "patterns": [
          {
              "match": "\\\\\\s*\\n"
          }
      ]
  },
  {
      "begin": "[!]",
      "beginCaptures": {
          "0": {
              "name": "punctuation.definition.comment.fortran"
          }
      },
      "end": "$\\n?",
      "name": "comment.line.asterisk.fortran",
      "patterns": [
          {
              "match": "\\\\\\s*\\n"
          }
      ]
  }
  ],
  "uuid": "8e494bec-c003-4942-9a3a-b73fc1acfca6"
}